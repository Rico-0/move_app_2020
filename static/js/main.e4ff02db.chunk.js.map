{"version":3,"sources":["router/About.js","components/Movie.js","router/Home.js","components/Navigation.js","router/Detail.js","App.js","index.js"],"names":["About","props","console","log","className","Movie","title","year","summary","poster","genres","to","pathname","state","src","alt","map","genre","index","key","slice","Home","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","id","medium_cover_image","React","Component","Navigation","Detail","location","history","undefined","push","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"sUAeeA,MAZf,SAAeC,GAEX,OADAC,QAAQC,IAAIF,GAER,yBAAKG,UAAU,oBACX,qIAGA,yD,gFC8BGC,MAlCf,YAAuD,IAAvCC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,OAC1C,OACA,yBAAKN,UAAY,SACT,kBAAC,IAAD,CACIO,GAAK,CACDC,SAAU,gBACVC,MAAO,CAAEN,OAAMD,QAAOE,UAASC,SAAQC,YAGnD,yBAAKI,IAAOL,EAAQM,IAAOT,EAAOA,MAASA,IAC3C,yBAAKF,UAAY,eACb,wBAAIA,UAAY,gBAAgBE,GAChC,wBAAIF,UAAY,eAAeG,GAC/B,wBAAIH,UAAY,iBACXM,EAAOM,KAAI,SAACC,EAAOC,GAChB,OAAO,wBAAIC,IAAOD,EAAOd,UAAY,gBAAgBa,OAG7D,uBAAGb,UAAY,iBAAiBI,EAAQY,MAAM,EAAE,KAAhD,WCiCGC,G,kNAlDbR,MAAQ,CACNS,WAAW,EACXC,OAAQ,I,EAGVC,U,sBAAY,8BAAAC,EAAA,sEAKEC,IAAMC,IAAI,4DALZ,gBAGIJ,EAHJ,EAENK,KACEA,KAAQL,OAIb,EAAKM,SAAS,CAACN,SAAQD,WAAW,IAPzB,2C,kEAaVQ,KAAKN,c,+BAIC,MAEwBM,KAAKjB,MAA3BS,EAFF,EAEEA,UAAWC,EAFb,EAEaA,OAEnB,OACG,6BAASnB,UAAU,aAChBkB,EAAc,yBAAKlB,UAAU,UACb,0BAAMA,UAAU,gBAAhB,eAGjB,yBAAKA,UAAU,UACXmB,EAAOP,KAAI,SAACe,GAAD,OACQ,kBAAC,EAAD,CACGZ,IAAKY,EAAMC,GACXzB,KAAMwB,EAAMxB,KACZD,MAAOyB,EAAMzB,MACbE,QAASuB,EAAMvB,QACfC,OAAQsB,EAAME,mBACdvB,OAAQqB,EAAMrB,kB,GAzC9BwB,IAAMC,Y,MCWVC,MATf,WACI,OACI,yBAAKhC,UAAY,OACb,kBAAC,IAAD,CAAMO,GAAK,KAAX,QACA,kBAAC,IAAD,CAAMA,GAAK,UAAX,WCSG0B,E,kLAlBQ,MACeP,KAAK7B,MAA3BqC,EADO,EACPA,SAAUC,EADH,EACGA,aACGC,GAAlBF,EAASzB,OACR0B,EAAQE,KAAK,O,+BAIZ,IACGH,EAAYR,KAAK7B,MAAjBqC,SACR,OAAGA,EAASzB,MACD,8BAAOyB,EAASzB,MAAMP,OAEtB,S,GAbE4B,IAAMC,WCoBZO,MAXf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,KAAK,IAAGC,OAAO,EAAMC,UAAaxB,IACzC,kBAAC,IAAD,CAAOsB,KAAO,SAASE,UAAa7C,IACpC,kBAAC,IAAD,CAAO2C,KAAO,gBAAgBE,UAAaR,MCZjDS,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,W","file":"static/js/main.e4ff02db.chunk.js","sourcesContent":["import React from 'react';\r\nimport './About.css'\r\n\r\nfunction About(props){\r\n    console.log(props);\r\n    return (\r\n        <div className=\"about__container\">\r\n            <span>\r\n                \"Freedom is the freedom to stay that two plus two make four. If that is granted, all else follows.\"\r\n            </span>\r\n            <span>- George Orwell, 1984</span>\r\n        </div>\r\n        );\r\n}\r\n\r\nexport default About;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Movie.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nfunction Movie({title, year, summary, poster, genres}){\r\n    return (\r\n    <div className = \"movie\">\r\n            <Link\r\n                to= {{\r\n                    pathname: '/movie-detail',\r\n                    state: { year, title, summary, poster, genres },\r\n                }}\r\n                >\r\n        <img src = {poster} alt = {title} title = {title} />\r\n        <div className = \"movie__data\">\r\n            <h3 className = \"movie__title\">{title}</h3>\r\n            <h5 className = \"movie__year\">{year}</h5>\r\n            <ul className = \"movie__genres\">\r\n                {genres.map((genre, index) => {\r\n                    return <li key = {index} className = \"movie__genre\">{genre}</li>;\r\n                })}\r\n            </ul>\r\n            <p className = \"movie_summary\">{summary.slice(0,180)}...</p> \r\n        </div>\r\n    </Link>\r\n </div>\r\n    );\r\n}\r\n\r\n// Movie에 넘어와야 하는 영화 데이터를 정의하고 관리하기 위해 PropTypes를 사용. p는 반드시 소문자로...^^\r\nMovie.propTypes = {\r\n                   year: PropTypes.number.isRequired,\r\n                   title: PropTypes.string.isRequired,\r\n                   summary: PropTypes.string.isRequired,\r\n                   poster: PropTypes.string.isRequired, //영화 포스터 이미지 주소 저장. props의 이름을 이해하기 쉽도록 medium_cover_image가 아니라 poster라고 지정했다고.\r\n                   genres: PropTypes.arrayOf(PropTypes.string).isRequired, //장르는 여러개일 수 있으므로 배열\r\n                 }; // id는 자료형이 Number이고, 반드시 있어야 하니까 PropTypes.number.isRequired로 작성한다.\r\n\r\nexport default Movie;","import React from 'react';\r\nimport axios from 'axios';\r\nimport Movie from '../components/Movie'; //Movie 컴포넌트 import\r\nimport './Home.css';\r\n\r\n\r\nclass Home extends React.Component {\r\n  state = {\r\n    isLoading: true, //영화 앱 데이터 로딩 체크하는 변수. 초기값은 true임\r\n    movies: [], // 로딩된 영화 데이터를 저장할 수 있도록 movies state를 만든다.\r\n  };\r\n\r\n  getMovies = async() => { // getMovies() 함수는 시간이 필요하고\r\n      const{  // 구조 분해 할당\r\n        data:{\r\n          data : {movies},\r\n        }\r\n      } = await axios.get('https://yts-proxy.now.sh/list_movies.json?sort_by=rating');\r\n      // axios.get()의 실행을 기다려 달라고 await로 자바스크립트에게 말해 줌\r\n     this.setState({movies, isLoading: false}); // 왼쪽은 state고 오른쪽은 구조 분해 할당으로 얻은 영화 데이터가 있는 변수임! 하지만 ES6에서는 객체의 키와 대입할 변수의 이름이 같다면 코드 축약이 가능함.\r\n    }\r\n\r\n  componentDidMount(){\r\n    // 영화 데이터 (영화 앱) 로딩. JS의 fetch() 함수를 알아야 하지만 어려워서 Axios라는 도구를 사용할 예정\r\n    //axios.get('https://yts-proxy.now.sh/list_movies.json');\r\n    this.getMovies();\r\n    \r\n  }\r\n\r\n  render(){ \r\n    // 구조 분해 할당 : this.state에 있는 isLoadingd을 우선 얻으면 항상 this.state를 입력하지 않아도 된다.\r\n    const { isLoading, movies } = this.state;\r\n    // 삼항 연산자 : isLoading이 true이면 Loading..., false이면 영화 데이터 출력   (컴포넌트를 여러 개 출력할 때는 유일한 값을 이용하여 key props를 추가해야 한다. 그 key가 id)\r\n    return (\r\n       <section className=\"container\">\r\n         {isLoading ? ( <div className=\"loader\">\r\n                          <span className=\"loader__text\">Loading...</span>\r\n                        </div>\r\n       ) : (\r\n         <div className=\"movies\">\r\n            {movies.map((movie) => (\r\n                                <Movie\r\n                                   key={movie.id} \r\n                                   year={movie.year} \r\n                                   title={movie.title} \r\n                                   summary={movie.summary} \r\n                                   poster={movie.medium_cover_image}\r\n                                   genres={movie.genres} \r\n                                   />\r\n                                  ))}\r\n                                  </div>\r\n       )}\r\n        </section> // 'We are ready' 부분에 영화 데이터를 출력할 것이다. -> 그 부분에 movies.map() 함수로 컴포넌트를 출력한다.\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Navigation.css';\r\n\r\n\r\n//a href는 페이지 전체를 새로고침하는 링크이므로 리액트 장점 활용이 힘들어서 Link to 태그를 쓴다.\r\n// pathname은 URL , state는 우리가 route props에 보내줄 데이터 (to props에 객체를 전달했음)\r\n// {{ pathname: '/about', state: { fromNavigation: true}}}\r\nfunction Navigation(){\r\n    return (\r\n        <div className = \"nav\">\r\n            <Link to = \"/\">home</Link> \r\n            <Link to = \"/about\">About</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\n\r\nclass Detail extends React.Component{\r\n    componentDidMount(){ // Detail 컴포넌트가 마운트되면\r\n        const { location, history } = this.props; //구조 분해 할당으로 location, history를 얻고\r\n        if(location.state == undefined){\r\n            history.push('/');\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { location} = this.props;\r\n        if(location.state){\r\n            return <span>{location.state.title}</span>\r\n        }else{\r\n            return null;\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default Detail;","import React from 'react';\nimport './App.css';\nimport { HashRouter, Route } from 'react-router-dom';\nimport About from './router/About';\nimport Home from './router/Home'\nimport Navigation from './components/Navigation';\nimport Detail from './router/Detail';\n\n\n// Link, Router 컴포넌트는 반드시 HashRouter 안에 포함되어야 한다.\n// exact={true} 는 route 컴포넌트가 path props와 정확하게 일치하는 URL에만 반응하도록 만들어 준다.\nfunction App(){\n  return (\n    <HashRouter>\n      <Navigation />\n      <Route path=\"/\"exact={true} component = {Home}  />\n      <Route path = \"/about\" component = {About} />\n      <Route path = \"/movie-detail\" component = {Detail} />\n    </HashRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}